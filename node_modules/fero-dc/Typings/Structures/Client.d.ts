/**
 * MIT License
 *
 * Copyright (c) 2021 Ferotiq
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * @format
 */
import * as Discord from "discord.js";
import { Command } from "./Command.js";
import "colors";
interface HelpCommandStyle extends Discord.MessageEmbedOptions {
    slashCommand: boolean;
}
interface ClientOptions extends Discord.ClientOptions {
    tokenName: string;
    prefix: string;
    commandLoadedMessage?: boolean;
    eventLoadedMessage?: boolean;
    builtInHelpCommand?: HelpCommandStyle;
    deleteUnusedSlashCommands?: boolean;
    permissionData: object;
}
interface Paths {
    config: string;
    commands: string;
    events: string;
}
declare type Perm = Discord.PermissionString | Discord.Permissions;
declare type Permission = Perm | Perm[];
declare type PrefixCollection = Discord.Collection<string | Discord.Guild, string> | [string | Discord.Guild, string][] | Map<string | Discord.Guild, string>;
export declare class Client extends Discord.Client {
    private fdcconsole;
    commands: Discord.Collection<string, Command<any>>;
    discord: typeof Discord;
    defaultPrefix: string;
    prefixes: Discord.Collection<string, string>;
    commandLoadedMessage: boolean;
    eventLoadedMessage: boolean;
    emitMessageOnInteraction: boolean;
    builtInHelpCommand: HelpCommandStyle;
    deleteUnusedSlashCommands: boolean;
    paths: Paths;
    modules: object;
    permissionData: object;
    config: ClientOptions;
    private started;
    private converters;
    converterDescriptions: {
        string: string;
        mstring: string;
        char: string;
        number: string;
        int: string;
        float: string;
        boolean: string;
        color: string;
        guild: string;
        member: string;
        user: string;
        channel: string;
        message: string;
        invite: string;
        emoji: string;
        role: string;
        permission: string;
        time: string;
        command: string;
    };
    constructor(paths: Paths, modules?: object);
    start(): Promise<void>;
    reload(): Promise<string>;
    checkPermissions(permissions: Permission[], member: Discord.GuildMember): boolean;
    private checkPermission;
    runCommand(command: Command<any>, message: Discord.Message, args: string[]): Promise<void>;
    getCommandsFromCategory(category: string): Discord.Collection<string, Command<any>>;
    getCommandUsage(command: Command<any>, guild?: Discord.Guild): string;
    prefix(guild?: Discord.Guild | string): string;
    loadPrefixes(...iterators: PrefixCollection[]): Discord.Collection<string, string>;
    get commandCategories(): string[];
}
export {};
